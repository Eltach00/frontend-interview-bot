{
  "html": [
    {
      "id": 1,
      "text": "Which tag is used to create a hyperlink?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<link>", "isCorrect": false },
        { "id": 2, "text": "<a>", "isCorrect": true },
        { "id": 3, "text": "<href>", "isCorrect": false },
        { "id": 4, "text": "<anchor>", "isCorrect": false }
      ]
    },
    {
      "id": 2,
      "text": "Which tag is used to insert an image?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<img>", "isCorrect": true },
        { "id": 2, "text": "<picture>", "isCorrect": false },
        { "id": 3, "text": "<media>", "isCorrect": false },
        { "id": 4, "text": "<graphic>", "isCorrect": false }
      ]
    },
    {
      "id": 3,
      "text": "Which tag inside <html> defines the document's header?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<head>", "isCorrect": true },
        { "id": 2, "text": "<header>", "isCorrect": false },
        { "id": 3, "text": "<title>", "isCorrect": false },
        { "id": 4, "text": "<meta>", "isCorrect": false }
      ]
    },
    {
      "id": 4,
      "text": "Which attribute is used to define alternative text for an image?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "src", "isCorrect": false },
        { "id": 2, "text": "alt", "isCorrect": true },
        { "id": 3, "text": "title", "isCorrect": false },
        { "id": 4, "text": "href", "isCorrect": false }
      ]
    },
    {
      "id": 5,
      "text": "Which attribute allows a link to open in a new tab?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "target=_blank", "isCorrect": true },
        { "id": 2, "text": "target=blank", "isCorrect": false },
        { "id": 3, "text": "target=_self", "isCorrect": false },
        { "id": 4, "text": "target=_new", "isCorrect": false }
      ]
    },
    {
      "id": 6,
      "text": "What is the 'placeholder' attribute used for?",
      "hasOptions": false,
      "answer": "The 'placeholder' attribute is used to display a hint or example input in a form field before the user starts entering their data."
    },
    {
      "id": 7,
      "text": "How to create an unordered list in HTML?",
      "hasOptions": false,
      "answer": "To create an unordered list in HTML, use the <code>ul</code> tag, and for each list item, use the <code>li</code> tag."
    },
    {
      "id": 8,
      "text": "What is HTML?",
      "hasOptions": false,
      "answer": "HTML (HyperText Markup Language) is a standardized markup language used for creating and developing web pages. It is a system for marking up parts of a web page using tags enclosed in angle brackets."
    },
    {
      "id": 9,
      "text": "What does the <!DOCTYPE> tag do?",
      "hasOptions": false,
      "answer": "It is a declaration that informs the web browser about the version of the markup language used to create the web page. This helps the browser display the page correctly."
    },
    {
      "id": 10,
      "text": "Which tag is used to create a table?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<table>", "isCorrect": true },
        { "id": 2, "text": "<grid>", "isCorrect": false },
        { "id": 3, "text": "<row>", "isCorrect": false },
        { "id": 4, "text": "<column>", "isCorrect": false }
      ]
    },
    {
      "id": 11,
      "text": "Which tag is used to create a table header?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<caption>", "isCorrect": false },
        { "id": 2, "text": "<th>", "isCorrect": false },
        { "id": 3, "text": "<thead>", "isCorrect": true },
        { "id": 4, "text": "<title>", "isCorrect": false }
      ]
    },
    {
      "id": 12,
      "text": "Which tag is used to create a table row?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<td>", "isCorrect": false },
        { "id": 2, "text": "<row>", "isCorrect": false },
        { "id": 3, "text": "<line>", "isCorrect": false },
        { "id": 4, "text": "<tr>", "isCorrect": true }
      ]
    },
    {
      "id": 13,
      "text": "Which tag is used to create a table cell?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<cell>", "isCorrect": false },
        { "id": 2, "text": "<tr>", "isCorrect": false },
        { "id": 3, "text": "<th>", "isCorrect": false },
        { "id": 4, "text": "<td>", "isCorrect": true }
      ]
    },
    {
      "id": 14,
      "text": "What are semantic tags in HTML?",
      "hasOptions": false,
      "answer": "Semantic tags in HTML are tags that convey information about the meaning or purpose of the content, not just its appearance. Examples of semantic tags include header, footer, article, section, nav, and others. They help create more structured and accessible web pages."
    },
    {
      "id": 15,
      "text": "Which attribute is used to set a background image?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "background", "isCorrect": false },
        { "id": 2, "text": "background-color", "isCorrect": false },
        { "id": 3, "text": "bgcolor", "isCorrect": false },
        { "id": 4, "text": "background-image", "isCorrect": true }
      ]
    },
    {
      "id": 16,
      "text": "Which tag is used to create a dropdown list?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<dropdown>", "isCorrect": false },
        { "id": 2, "text": "<list>", "isCorrect": false },
        { "id": 3, "text": "<select>", "isCorrect": true },
        { "id": 4, "text": "<option>", "isCorrect": false }
      ]
    },
    {
      "id": 17,
      "text": "Which tag is used to insert JavaScript code into an HTML document?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<javascript>", "isCorrect": false },
        { "id": 2, "text": "<script>", "isCorrect": true },
        { "id": 3, "text": "<js>", "isCorrect": false },
        { "id": 4, "text": "<java>", "isCorrect": false }
      ]
    },
    {
      "id": 18,
      "text": "Which attribute is used to specify the path to an image?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "src", "isCorrect": true },
        { "id": 2, "text": "href", "isCorrect": false },
        { "id": 3, "text": "path", "isCorrect": false },
        { "id": 4, "text": "url", "isCorrect": false }
      ]
    },
    {
      "id": 19,
      "text": "What does the 'readonly' attribute do in a form element?",
      "hasOptions": false,
      "answer": "The 'readonly' attribute makes a form element read-only, meaning the user cannot change the element's value but can view it. This can be useful if you want to display information that should not be modified."
    },
    {
      "id": 20,
      "text": "What are web standards and why are they needed?",
      "hasOptions": false,
      "answer": "Web standards are guidelines developed by standards groups such as W3C or WHATWG to ensure compatibility and sustainability of web technologies. They include recommendations for HTML, CSS, JavaScript, and other web technologies. Adhering to web standards helps ensure that web pages work correctly across different browsers and devices and makes it easier to maintain and expand websites in the future."
    },
    {
      "id": 21,
      "text": "What is responsive web design?",
      "hasOptions": false,
      "answer": "It is an approach to web design that allows web pages to display and function correctly on various devices, including mobile phones, tablets, and desktop computers, by using flexible layouts, flexible images, and CSS media queries to adapt the design to different screen sizes and device characteristics."
    },
    {
      "id": 22,
      "text": "Which HTML tag is used to insert a video?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<media>", "isCorrect": false },
        { "id": 2, "text": "<video>", "isCorrect": true },
        { "id": 3, "text": "<movie>", "isCorrect": false },
        { "id": 4, "text": "<multimedia>", "isCorrect": false }
      ]
    },
    {
      "id": 23,
      "text": "Which tag is used to create the main heading on a web page?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<h1>", "isCorrect": true },
        { "id": 2, "text": "<header>", "isCorrect": false },
        { "id": 3, "text": "<title>", "isCorrect": false },
        { "id": 4, "text": "<head>", "isCorrect": false }
      ]
    },
    {
      "id": 24,
      "text": "What does the <br> tag do?",
      "hasOptions": false,
      "answer": "It is used to create a line break, allowing a new line to be started where it is placed. This is a convenient way to control the layout of text on a web page without using additional styles or elements."
    },
    {
      "id": 25,
      "text": "Which tag is used to create an ordered list?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<ul>", "isCorrect": false },
        { "id": 2, "text": "<ol>", "isCorrect": true },
        { "id": 3, "text": "<li>", "isCorrect": false },
        { "id": 4, "text": "<list>", "isCorrect": false }
      ]
    },
    {
      "id": 26,
      "text": "What is the DOM in the context of web development?",
      "hasOptions": false,
      "answer": "DOM (Document Object Model) is a programming interface for web documents. It represents a structured document as an object model, allowing programs and scripts to interact with the content, structure, and styles of a web page. The DOM represents the document as a tree of objects, each corresponding to a part of the page."
    },
    {
      "id": 27,
      "text": "Which attribute is used to define styles for an element on the page?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "style", "isCorrect": true },
        { "id": 2, "text": "css", "isCorrect": false },
        { "id": 3, "text": "styles", "isCorrect": false },
        { "id": 4, "text": "stylesheet", "isCorrect": false }
      ]
    },
    {
      "id": 28,
      "text": "What is the 'alt' attribute in the <img> tag?",
      "hasOptions": false,
      "answer": "It is used to provide alternative text that will be displayed if the image cannot be loaded. This is also useful for accessibility, as screen readers can use this text to describe the image to users with disabilities."
    }
  ],
  "css": [
    {
      "id": 1,
      "text": "What is the difference between CSS 'reset' and 'normalize'? Which would you choose and why?",
      "hasOptions": false,
      "answer": "A reset removes all built-in browser styles for elements. Normalize brings styles to a consistent appearance across all browsers. It is better to use Normalize for cross-browser compatibility."
    },
    {
      "id": 2,
      "text": "What is CSS selector specificity and how does it work?",
      "hasOptions": false,
      "answer": "Selector specificity (also called weight) is a property that determines the priority of a style rule, i.e., which style will ultimately be applied to an HTML element. For example, when using a UI library, the elements of that library will have default rules applied by the authors. If necessary, you can override these defaults with a more specific selector.\n\nMore details here: <a href='https://developer.mozilla.org/ru/docs/Web/CSS/Specificity' target='_blank'>Specificity (MDN)</a>"
    },
    {
      "id": 3,
      "text": "What is CSS?",
      "hasOptions": false,
      "answer": "CSS (Cascading Style Sheets) is a style language used to describe the appearance and formatting of a document written in a markup language such as HTML. CSS allows developers to control layout, fonts, colors, and other stylistic aspects of a web page."
    },
    {
      "id": 4,
      "text": "Why is it generally better to place CSS links in the <head> and <script> tags before the </body> tag? Do you know any exceptions? Provide examples.",
      "hasOptions": false,
      "answer": "Styles are recommended to be linked in the head so that the page takes on its appearance as quickly as possible. Scripts linked in the head can slow down this process, so they are recommended to be linked before the closing body tag. An exception is analytics scripts for tracking visitors who did not wait for the page to load. In this case, the script should be linked in the head."
    },
    {
      "id": 5,
      "text": "What does the 'z-index' property do in CSS?",
      "hasOptions": false,
      "answer": "The 'z-index' property in CSS controls the stacking order of elements along the Z-axis. An element with a higher 'z-index' value will appear on top of an element with a lower 'z-index' value."
    },
    {
      "id": 6,
      "text": "What are some ways to center a div?",
      "hasOptions": false,
      "answer": "There are several ways to center a div in CSS, here are some of them: \n1. Using margin and auto properties: `margin: 0 auto;`.\n2. Using Flexbox: `display: flex; justify-content: center; align-items: center;`.\n3. Using Grid Layout: `display: grid; place-items: center;`.\n4. Using text-align and inline-block properties: `text-align: center;` on the parent element and `display: inline-block;` on the div itself."
    },
    {
      "id": 7,
      "text": "Which property is used to set the background color?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "color", "isCorrect": false },
        { "id": 2, "text": "background-color", "isCorrect": true },
        { "id": 3, "text": "bgcolor", "isCorrect": false },
        { "id": 4, "text": "background", "isCorrect": false }
      ]
    },
    {
      "id": 8,
      "text": "Which property allows you to set the outer margins of an element?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "padding", "isCorrect": false },
        { "id": 2, "text": "border", "isCorrect": false },
        { "id": 3, "text": "margin", "isCorrect": true },
        { "id": 4, "text": "spacing", "isCorrect": false }
      ]
    },
    {
      "id": 9,
      "text": "Which property is used to set the font?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "font-weight", "isCorrect": false },
        { "id": 2, "text": "font-style", "isCorrect": false },
        { "id": 3, "text": "text-font", "isCorrect": false },
        { "id": 4, "text": "font-family", "isCorrect": true }
      ]
    },
    {
      "id": 10,
      "text": "Which CSS property allows you to control the visibility of an element in the DOM while preserving its space?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "display: none", "isCorrect": false },
        { "id": 2, "text": "visibility: hidden", "isCorrect": true },
        { "id": 3, "text": "is-visible: 0", "isCorrect": false },
        { "id": 4, "text": "color: transparent", "isCorrect": false }
      ]
    },
    {
      "id": 11,
      "text": "Which CSS property is used to set shadows for elements?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "box-shadow", "isCorrect": true },
        { "id": 2, "text": "text-shadow", "isCorrect": false },
        { "id": 3, "text": "shadow", "isCorrect": false },
        { "id": 4, "text": "border-shadow", "isCorrect": false }
      ]
    },
    {
      "id": 12,
      "text": "Which selector selects all .child elements that are direct children of .parent?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": ".parent + .child", "isCorrect": false },
        { "id": 2, "text": ".parent ~ .child", "isCorrect": false },
        { "id": 3, "text": ".parent > .child", "isCorrect": true },
        { "id": 4, "text": ".parent .child", "isCorrect": false }
      ]
    },
    {
      "id": 13,
      "text": "Which CSS selector selects all elements that have a specified attribute starting with a certain string?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "[attr=value]", "isCorrect": false },
        { "id": 2, "text": "[attr~=value]", "isCorrect": false },
        { "id": 3, "text": "[attr|=value]", "isCorrect": false },
        { "id": 4, "text": "[attr^=value]", "isCorrect": true }
      ]
    },
    {
      "id": 14,
      "text": "Which CSS selector selects all elements that have a specified attribute ending with a certain string?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "[attr=value]", "isCorrect": false },
        { "id": 2, "text": "[attr~=value]", "isCorrect": false },
        { "id": 3, "text": "[attr|=value]", "isCorrect": false },
        { "id": 4, "text": "[attr$=value]", "isCorrect": true }
      ]
    }
  ],
  "javascript": [
    {
      "id": 1,
      "text": "What is a pure function?",
      "hasOptions": false,
      "answer": "A pure function is a function that returns the same result when called with the same set of arguments and has no side effects."
    },
    {
      "id": 2,
      "text": "What is a closure?",
      "hasOptions": false,
      "answer": "Closures are the ability of a function to remember the lexical environment in which it was created, i.e., to store a reference to that environment and access it.\n\n<a href='https://youtu.be/mI6Jcfsgma4?si=46DV3mXPF6mDTTPs' target='_blank'>Detailed video about closures</a>"
    },
    {
      "id": 3,
      "text": "let VS const: why is it better to use const when possible?",
      "hasOptions": false,
      "answer": "Using const has two advantages:\n1) Safety: Declaring variables with const protects against unexpected changes to the variable's value in the code, which can often lead to errors and unexpected program behavior.\n2) Readability: Using const allows the code reader to understand that the variable's value will not change during program execution. This makes the code more understandable and reduces the chance of errors.\n\nMore details: <a href='https://youtu.be/07FllcTRj84?si=q7v60ZvHYBoRSSen' target='_blank'>Video about VAR/LET/CONST</a>"
    },
    {
      "id": 4,
      "text": "What are Promises in JavaScript?",
      "hasOptions": false,
      "answer": "Promises are objects that represent the result of an asynchronous operation. They can be in one of three states: pending, fulfilled, or rejected."
    },
    {
      "id": 5,
      "text": "What is destructuring in JavaScript?",
      "hasOptions": false,
      "answer": "Destructuring allows you to extract individual properties from objects or elements from arrays and assign them to variables in a more convenient form. For example, this is how we can extract the name and address of a user from the user object in one line:\n<code>const {name, address} = user;</code>"
    },
    {
      "id": 6,
      "text": "What are arrow functions in JavaScript?",
      "hasOptions": false,
      "answer": "Arrow functions are a syntactically compact way to write functions in JavaScript that do not have their own 'this'. They are often used to create anonymous functions.\n\n<a href='https://youtu.be/nGVYdna4kq4?si=1k0J9F-MYxWCaq6M' target='_blank'>Detailed video about functions in JS</a>"
    },
    {
      "id": 7,
      "text": "What is hoisting in JavaScript?",
      "hasOptions": false,
      "answer": "Hoisting is a mechanism in JavaScript where variable and function declarations are moved to the top of their scope before code execution."
    },
    {
      "id": 8,
      "text": "Which method is used to add an element to an array?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "splice()", "isCorrect": false },
        { "id": 2, "text": "pop()", "isCorrect": false },
        { "id": 3, "text": "shift()", "isCorrect": false },
        { "id": 4, "text": "push()", "isCorrect": true }
      ]
    },
    {
      "id": 9,
      "text": "Which object represents the current browser window?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "document", "isCorrect": false },
        { "id": 2, "text": "screen", "isCorrect": false },
        { "id": 3, "text": "window", "isCorrect": true },
        { "id": 4, "text": "browser", "isCorrect": false }
      ]
    },
    {
      "id": 10,
      "text": "Which operator is used for strict equality comparison?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "==", "isCorrect": false },
        { "id": 2, "text": "===", "isCorrect": true },
        { "id": 3, "text": "=", "isCorrect": false },
        { "id": 4, "text": "!==", "isCorrect": false }
      ]
    },
    {
      "id": 11,
      "text": "Which method is used to remove the last element from an array?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "splice()", "isCorrect": false },
        { "id": 2, "text": "pop()", "isCorrect": true },
        { "id": 3, "text": "shift()", "isCorrect": false },
        { "id": 4, "text": "push()", "isCorrect": false }
      ]
    },
    {
      "id": 12,
      "text": "Which method in JavaScript is used to convert an object to a JSON string?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "JSON.stringify()", "isCorrect": true },
        { "id": 2, "text": "JSON.parse()", "isCorrect": false },
        { "id": 3, "text": "JSON.toText()", "isCorrect": false },
        { "id": 4, "text": "JSON.toString()", "isCorrect": false }
      ]
    },
    {
      "id": 13,
      "text": "Which object in JavaScript is used to work with date and time?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Time", "isCorrect": false },
        { "id": 2, "text": "Date", "isCorrect": true },
        { "id": 3, "text": "Calendar", "isCorrect": false },
        { "id": 4, "text": "DateTime", "isCorrect": false }
      ]
    },
    {
      "id": 14,
      "text": "Which array method in JavaScript is used to filter elements based on a specific criterion?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "map()", "isCorrect": false },
        { "id": 2, "text": "filter()", "isCorrect": true },
        { "id": 3, "text": "reduce()", "isCorrect": false },
        { "id": 4, "text": "forEach()", "isCorrect": false }
      ]
    }
  ],
  "react": [
    {
      "id": 1,
      "text": "What is React JS?",
      "hasOptions": false,
      "answer": "React JS, or simply React, is an open-source JavaScript library for building user interfaces, especially for single-page applications (SPAs). Key features of React:\n1) Component-based approach: React is built on the concept of components, allowing developers to create easily reusable pieces of code;\n2) Virtual DOM: React uses a virtual DOM to track changes. This is an abstraction of the real DOM, allowing the library to update only those parts of the interface that have actually changed, rather than re-rendering the entire page. This makes React relatively fast;\n3) Hooks: The introduction of hooks allowed the use of state and other class component features in functional components, making the code more concise and clean;\n4) Community and ecosystem: React has a large and active developer community, as well as many community-created libraries and tools, making it easier to develop complex applications.\n\nMore details: <a href='https://youtu.be/R_39q-vdOaE?si=mEKDaYDjEdnojG-N' target='_blank'>Introduction to React (video)</a>"
    },
    {
      "id": 2,
      "text": "What is the purpose of the key attribute when rendering lists?",
      "hasOptions": false,
      "answer": "Keys help React identify which items have changed, been added, or been removed. They must be specified so that React can match array elements over time. The best way to pick a key is to use a string that uniquely identifies a list item among its siblings. Most often, you would use IDs from your data as keys. Array indexes can also be used for this, but only if the array items are not added to the beginning, reordered, or deleted."
    },
    {
      "id": 3,
      "text": "How does the children prop work?",
      "hasOptions": false,
      "answer": "Some components don’t know their children ahead of time. This is especially common for components like Sidebar or Dialog that represent generic “boxes”. For such components, you can use the special children prop, which will pass the child elements directly to the output.\n\nMore details: <a href='https://react.dev/learn/passing-props-to-a-component#passing-jsx-as-children' target='_blank'>React documentation (eng)</a>"
    },
    {
      "id": 4,
      "text": "What are portals in React?",
      "hasOptions": false,
      "answer": "Portals provide a way to render children into a DOM node that exists outside the DOM hierarchy of the parent component. A typical use case for portals is when a parent component has styles like overflow: hidden or z-index, but you need the child to visually “break out” of its container. Most often, this is for dialogs, hovercards, and tooltips."
    },
    {
      "id": 5,
      "text": "What is Reconciliation?",
      "hasOptions": false,
      "answer": "It is the process by which React updates the DOM. When a component's state changes, React needs to calculate whether the DOM needs to be updated. This is done by creating a virtual DOM and comparing it with the current DOM. In this context, the virtual DOM will contain the new state of the component."
    },
    {
      "id": 6,
      "text": "What is the useEffect hook used for in React?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Storing component state",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "Performing side effects",
          "isCorrect": true
        },
        { "id": 3, "text": "Memoizing values", "isCorrect": false },
        {
          "id": 4,
          "text": "Creating references to DOM elements",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 7,
      "text": "What happens if you pass an empty array [] as the second argument to useEffect?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Error", "isCorrect": false },
        {
          "id": 2,
          "text": "useEffect will run 0 times",
          "isCorrect": false
        },
        { "id": 3, "text": "useEffect will run 1 time", "isCorrect": true },
        { "id": 4, "text": "No correct answer", "isCorrect": false }
      ]
    },
    {
      "id": 8,
      "text": "Which hook is used to create state in a component?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "useEffect", "isCorrect": false },
        { "id": 2, "text": "useState", "isCorrect": true },
        { "id": 3, "text": "useContext", "isCorrect": false },
        { "id": 4, "text": "useReducer", "isCorrect": false }
      ]
    },
    {
      "id": 9,
      "text": "Which element is used to group elements without adding extra nodes to the DOM?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<Group>", "isCorrect": false },
        { "id": 2, "text": "<Div>", "isCorrect": false },
        { "id": 3, "text": "<Fragment> (<>)", "isCorrect": true },
        { "id": 4, "text": "<List>", "isCorrect": false }
      ]
    },
    {
      "id": 10,
      "text": "We have an array of strings (arr), each of which we want to display on the page. Which array method should be applied in the component's return?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "{arr.forEach(...)}", "isCorrect": false },
        { "id": 2, "text": "{arr.filter(...)}", "isCorrect": false },
        { "id": 3, "text": "{arr.for(...)}", "isCorrect": false },
        { "id": 4, "text": "{arr.map(...)}", "isCorrect": true }
      ]
    },
    {
      "id": 11,
      "text": "Which element is used to handle errors in the component tree?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "ErrorBoundary", "isCorrect": true },
        { "id": 2, "text": "CatchError", "isCorrect": false },
        { "id": 3, "text": "ErrorWrapper", "isCorrect": false },
        { "id": 4, "text": "ErrorCatcher", "isCorrect": false }
      ]
    },
    {
      "id": 12,
      "text": "Which argument(s) does the useMemo hook accept?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "A function and an array of dependencies",
          "isCorrect": true
        },
        {
          "id": 2,
          "text": "A function and an options object",
          "isCorrect": false
        },
        { "id": 3, "text": "A function", "isCorrect": false },
        { "id": 4, "text": "An array of dependencies", "isCorrect": false }
      ]
    },
    {
      "id": 13,
      "text": "What is the useCallback hook used for in React?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Creating links to DOM elements",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "Storing component state",
          "isCorrect": false
        },
        { "id": 3, "text": "Performing side effects", "isCorrect": false },
        { "id": 4, "text": "Memoization of functions", "isCorrect": true }
      ]
    }
  ]
}
